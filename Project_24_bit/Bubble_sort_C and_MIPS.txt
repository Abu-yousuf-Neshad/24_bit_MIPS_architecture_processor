
C Code:

#include <stdio.h>

int main() {
    int arr[] = {25, 12, 22, 11};
    int n = 4;
    int temp = 0;

    int i = 0;
    int a=0;
    int b=0;
    int c=0;
    int d=0;
    
    d=n-1;
    while (i < d) {
        int j = 0;
        b = n - i;
        c=b-1;
        while (j < c) {
            a = j + 1;
            if (arr[j] > arr[a]) {
                temp = arr[j];
                arr[j] = arr[a];
                arr[a] = temp;
            }
            j++;
        }
        i++;
    }

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}


MIPS CODE:
r2=n
r3=i;
r4=j
r5=temp
r7=a;
r8=b;
r9=c;
r10=d;

0. r1=r0-1
   opcode rs rd im
   subi r0 r1   1
   1101 00000 00001 00000 00001
   d00401

1. addi r0 r2 4 
   opcode rs rd im
   0001   00000 00010 00000 00100
   100804

2. addi r0 r3 0 
   opcode rs rd im
   0001   00000 00011 00000 00000
   100C00

3. addi r0 r4 0 
   opcode rs rd im
   0001   00000 00100 00000 00000
   101000

4. addi r0 r5 0 
   opcode rs rd im
   0001   00000 00101 00000 00000
   101400

5. addi r0 r7 0 
   opcode rs rd im
   0001   00000 00111 00000 00000
   101C00

6. addi r0 r8 0 
   opcode rs rd im
   0001   00000 01000 00000 00000
   102000

7. addi r0 r9 0 
   opcode rs rd im
   0001   00000 01001 00000 00000
   102400

8. addi r0 r10 0 
   opcode rs rd im
   0001   00000 01010 00000 00000
   102800

9.addi r0 r11 25
  opcode rs rd im
  0001 00000 01011 00000 11001
  102c19

10. M[r0+0]<- r11
   sw rs rd im
   1010 00000 01011 00000 00000
   a02c00

11.addi r0 r12 12
  opcode rs rd im
  0001 00000 01100 00000 01100
  10300c

12. M[r0+1]<- r12
   sw rs rd im
   1010 00000 01100 00000 00001
   a03001

13.addi r0 r13 22
  opcode rs rd im
  0001 00000 01101 00000 10110
  103416

14. M[r0+2]<- r13
   sw rs rd im
   1010 00000 01101 00000 00010
   a03402

15.addi r0 r14 11
  opcode rs rd im
  0001 00000 01110 00000 01011
  10380B

16. M[r0+3]<- r14
   sw rs rd im
   1010 00000 01110 00000 00011
   a03803

17. d=n-1;
   subi r2 r10 1
   1101 00010 01010 00000 00001
   d12801

18. i < d
    slt r3 r10 r15 
    opcode rs rt rd 
    1011   r3 r10 r15
    1011  00011 01010 01111 00000
    b1a9e0

19. beq r0 r15 19
    1000 00000 01111 00000 10011
    803c13

20.addi r0 r4 0 
   opcode rs rd im
   0001   00000 00100 00000 00000
   101000

21. sub r2 r3 r8 
    opcode rs rt rd shmt 
    0010   r2 r3 r8 0
    0010   00010 00011 01000 00000
    210d00

22. subi r8 r9 1 
    opcode rs rd im 
    1101  r8 r9  1
    1101  01000 01001 00000 00001
    d42401

23. j < c
    slt r4 r9 r16 
    opcode rs rt rd 
    1011   r4 r9 r16
    1011  00100 01001 10000 00000
    b22600

24. beq r0 r16 12
    beq r0 r16 12
    1000 00000 10000 0000001100
    80400C

25. r17<-M[j+0]
    lw r4 r17 0 
    1001 00100 10001 00000 00000
    924400

26.r18<-M[j+1]
    lw r4 r18 1 
    1001 00100 10010 00000 00001
    924801

27. arr[j] > arr[j+1]
    sgt r17 r18 r19
    1100 10001 10010 10011 00000
    c8cA60

28. beq r1 r19 2
    1000 00001 10011 00000 00010
    80cc02

29. jump 34
    0111 00000 00000 00001 00010
    700022

30.r5<-M[j+0]
    lw r4 r5 0 
    1001 00100 00101 00000 00000
    921400


31. M[j+1]->r17
   lw rs rd im
   1001 r4 r17 1
   1001 00100 10001 00000 00001
   924401

32. r17->M[j+0]
    sw rs rd im
    1010 r4 r17 0
    1010 00100 10001 00000 00000
    a24400

33.M[j+1] <-temp
   sw r4 r5 1
   1010 00100 00101 00000 00001
   a21401

34.  j++;
    r4=r4+1
    addi r4 r4 1
    0001 00100 00100 00000 00001
    121001

35.jump 23
   0111 00000 00000 00000 10111
   700017
        
36.i=i+1
   r3=r3+1
   addi rs rd im
   0001 00011 00011 00000 00001
   118c01

37.jump 18
   opcode address
   0111  00000 00000 00000 10010
   700012

38.















